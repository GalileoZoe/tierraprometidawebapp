import React, { useState } from 'react';
import { PDFDownloadLink } from '@react-pdf/renderer';
import { useStudentsApi } from '../../../hooks/useStudentsApi';
import { PDFDocument } from '../../Components/PDFDocument';
import { Student } from '../../../interfaces/Students';
import { StudentDetail } from './StudentDetail'; // Importamos el nuevo componente
import { FaUser, FaFilePdf, FaFemale, FaMale, FaCannabis, FaWineBottle, FaSnowflake, FaSyringe, FaPhone, FaMap, FaAlignLeft, FaPlus } from 'react-icons/fa';
import { useTheme } from '../../../context/ThemeContext';
import { StudentsForm } from './StudentsForm';

export const Students: React.FC = () => {
    const { isLoading, listStudents, deleteStudent, createStudent } = useStudentsApi();
    const { theme } = useTheme();
    const [editingStudent, setEditingStudent] = useState<Student | null>(null);
    const [isCreating, setIsCreating] = useState<boolean>(false); 
    const [selectedStudent, setSelectedStudent] = useState<Student | null>(null); // Estado para el detalle

    const handleDelete = (student: Student) => {
        const confirmDelete = window.confirm("¿Estás seguro de que deseas eliminar este estudiante?");
        if (confirmDelete) {
            deleteStudent(student);
        }
    };

    const handleEdit = (student: Student) => {
        setEditingStudent(student);
    };

    const handleCreate = () => {
        setEditingStudent(null); 
        setIsCreating(true);
    };

    const handleCloseForm = () => {
        setEditingStudent(null);
        setIsCreating(false);
    };

    const handleOpenDetail = (student: Student) => {
        setSelectedStudent(student); // Asignar el estudiante seleccionado
    };

    const handleCloseDetail = () => {
        setSelectedStudent(null); // Cerrar el detalle
    };

    if (editingStudent || isCreating) {
        return (
            <StudentsForm
                student={editingStudent || { name: '', lastname: '', username: '', age: '', email: '', phone: '', address: '', drug: '', description: '', status: '', startdate: '', enddate: '' }}
                onClose={handleCloseForm}
                onSave={isCreating ? createStudent : undefined}
            />
        );
    }

    return (
        <section className='section'>
            <div>
                <h1 className='title'>Usuarios</h1>
                <FaUser className='icon' />
                <br />

                <a onClick={handleCreate} style={{ float: 'left' }} className='button'>
                    <FaUser style={{ marginLeft: 10 }} />
                    <FaPlus style={{ marginRight: 10 }} />
                </a>
                <br />
                <br />

                {selectedStudent ? (
                       <StudentDetail student={selectedStudent} onClose={handleCloseDetail} />
                ) : (
                    <div className='tablemargin'>
                        <table className='table'>
                            <thead>
                                <tr style={{ textAlign: 'center', position: 'sticky', top: 0, backgroundColor: 'transparent', zIndex: 1 }}>
                                    <th>No.</th>
                                    <th>PDF</th>
                                    <th>Usuario</th>
                                    <th>Estado</th>
                                    <th>Edad</th>
                                    <th>Género</th>
                                    <th>Grupo</th>
                                    <th>Sustancia</th>
                                    <th>Responsable</th>
                                    <th>Dirección</th>
                                    <th>Teléfono</th>
                                    <th>Ingreso</th>
                                    <th>Estancia</th>
                                    <th>Egreso</th>
                                    <th>Descripción</th>
                                    <th>Reportes</th>
                                    <th>Opciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                {listStudents.length > 0 ? (
                                    listStudents.map((student: Student) => (
                                        <tr key={student._id} style={{ textAlign: 'center', fontSize: '15px' }}>
                                            <td>{student.number}</td>
                                            <td>
                                                <PDFDownloadLink
                                                    document={<PDFDocument student={student} />}
                                                    fileName={`${student.name}_${student.lastname}.pdf`}
                                                >
                                                    <FaFilePdf className='icon' />
                                                </PDFDownloadLink>
                                            </td>
                                           
                                            {/* Añadir otros detalles... */}
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        <td colSpan={17}>No hay estudiantes disponibles</td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* {selectedStudent && (
                    <StudentDetail student={selectedStudent} onClose={handleCloseDetail} />
                )} */}
            </div>
        </section>
    );
};
